/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/table.js":
/*!*********************!*\
  !*** ./js/table.js ***!
  \*********************/
/***/ (() => {

eval("const data = [\n  {\n    ChemicalName: \"Sodium Hydroxide\",\n    Vendor: \"ChemCo Ltd.\",\n    Density: \"2.13 \",\n    Viscosity: \"78 \",\n    Packaging: \"Drum\",\n    PackSize: 50,\n    Unit: \"kg\",\n    Quantity: 10,\n  },\n  {\n    ChemicalName: \"Acetic Acid\",\n    Vendor: \"LabSupplies Inc.\",\n    Density: \"1.05 \",\n    Viscosity: \"1.22 \",\n    Packaging: \"Bottle\",\n    PackSize: 1,\n    Unit: \"L\",\n    Quantity: 25,\n  },\n  {\n    ChemicalName: \"Benzene\",\n    Vendor: \"ChemTrade Ltd.\",\n    Density: \"0.87 \",\n    Viscosity: \"0.65 \",\n    Packaging: \"Canister\",\n    PackSize: 20,\n    Unit: \"L\",\n    Quantity: 5,\n  },\n  {\n    ChemicalName: \"Ethanol\",\n    Vendor: \"BioChem Corp.\",\n    Density: \"0.789 \",\n    Viscosity: \"1.2 \",\n    Packaging: \"Bottle\",\n    PackSize: 5,\n    Unit: \"L\",\n    Quantity: 40,\n  },\n  {\n    ChemicalName: \"Hydrogen Peroxide\",\n    Vendor: \"Reagent Supplies\",\n    Density: \"1.45 \",\n    Viscosity: \"1.245 \",\n    Packaging: \"Bottle\",\n    PackSize: 2,\n    Unit: \"L\",\n    Quantity: 30,\n  },\n  {\n    ChemicalName: \"Sulfuric Acid\",\n    Vendor: \"Industrial Chem.\",\n    Density: \"1.84 \",\n    Viscosity: \"26.7 \",\n    Packaging: \"Drum\",\n    PackSize: 100,\n    Unit: \"kg\",\n    Quantity: 8,\n  },\n  {\n    ChemicalName: \"Ammonium Nitrate\",\n    Vendor: \"Agro Chemicals\",\n    Density: \"1.725 \",\n    Viscosity: \"1.2 \",\n    Packaging: \"Bag\",\n    PackSize: 25,\n    Unit: \"kg\",\n    Quantity: 15,\n  },\n  {\n    ChemicalName: \"Methanol\",\n    Vendor: \"PureChem Ltd.\",\n    Density: \"0.792 \",\n    Viscosity: \"0.59 \",\n    Packaging: \"Bottle\",\n    PackSize: 1,\n    Unit: \"L\",\n    Quantity: 50,\n  },\n  {\n    ChemicalName: \"Phosphoric Acid\",\n    Vendor: \"Chem Solutions\",\n    Density: \"1.685 \",\n    Viscosity: \"3.38 \",\n    Packaging: \"Canister\",\n    PackSize: 20,\n    Unit: \"L\",\n    Quantity: 10,\n  },\n  {\n    ChemicalName: \"Calcium Chloride\",\n    Vendor: \"Minera Chem\",\n    Density: \"2.15 \",\n    Viscosity: \"1.5 \",\n    Packaging: \"Bag\",\n    PackSize: 25,\n    Unit: \"kg\",\n    Quantity: 20,\n  },\n];\n\nconst tableheader = document.getElementById(\"table-head\");\nconst tablebody = document.getElementById(\"table-body\");\n\nconst headers = [\n  '<span class=\"material-symbols-outlined\">check</span>',\n  \"Chemical Name\",\n  \"Vendor\",\n  \"Density g/m³\",\n  \"Viscosity m²/s \",\n  \"Packaging\",\n  \"Pack Size\",\n  \"Unit\",\n  \"Quantity\",\n];\n\nlet selectedRowIndex = -1;\nlet isEditing = false;\nlet currentEditingCell = null;\nlet isModified = false;\n\nconst saveButton = document.querySelector(\".save\");\n\nsaveButton.disabled = true;\nsaveButton.style.cursor = \"not-allowed\";\n\n// Create table header\nconst tr = document.createElement(\"tr\");\nheaders.forEach((headerKey) => {\n  const th = document.createElement(\"th\");\n  th.innerHTML = headerKey;\n  th.style.width = \"10%\";\n  tr.appendChild(th);\n});\ntableheader.appendChild(tr);\n\nfunction loadTableData() {\n  tablebody.innerHTML = \"\";\n\n  data.forEach((dataKey, index) => {\n    const tr = document.createElement(\"tr\");\n\n    const tdCheck = document.createElement(\"td\");\n    tdCheck.innerHTML = '<span class=\"material-symbols-outlined\">check</span>';\n    tr.appendChild(tdCheck);\n\n    Object.values(dataKey).forEach((key, i) => {\n      const td = document.createElement(\"td\");\n      td.innerText = key;\n      td.style.width = \"10%\";\n      tr.appendChild(td);\n\n      td.addEventListener(\"dblclick\", (event) => {\n        event.stopPropagation();\n        editCell(td, index, i);\n      });\n    });\n\n    // Add event listener to select the row when clicked\n    tr.addEventListener(\"click\", () => selectRow(index));\n    tablebody.appendChild(tr);\n\n    // Highlight the selected row\n    if (index === selectedRowIndex) {\n      tr.classList.add(\"selected\");\n    }\n  });\n}\n\n// Select row by clicking\nfunction selectRow(index) {\n  const rows = document.querySelectorAll(\"tbody tr\");\n  rows.forEach((row) => row.classList.remove(\"selected\"));\n  rows[index].classList.add(\"selected\");\n  selectedRowIndex = index;\n}\n\n// Move selected row up\ndocument.querySelector(\".upward\").addEventListener(\"click\", () => {\n  if (selectedRowIndex > 0 && selectedRowIndex < data.length) {\n    [data[selectedRowIndex - 1], data[selectedRowIndex]] = [\n      data[selectedRowIndex],\n      data[selectedRowIndex - 1],\n    ];\n    selectedRowIndex--;\n    loadTableData();\n  }\n});\n\n// Move selected row down\ndocument.querySelector(\".downward\").addEventListener(\"click\", () => {\n  if (selectedRowIndex >= 0 && selectedRowIndex < data.length - 1) {\n    [data[selectedRowIndex + 1], data[selectedRowIndex]] = [\n      data[selectedRowIndex],\n      data[selectedRowIndex + 1],\n    ];\n    selectedRowIndex++;\n    loadTableData();\n    markAsModified();\n  }\n});\n\n// Delete row functionality\ndocument.querySelector(\".delete\").addEventListener(\"click\", () => {\n  if (selectedRowIndex >= 0 && selectedRowIndex < data.length) {\n    data.splice(selectedRowIndex, 1);\n    selectedRowIndex = -1;\n    loadTableData();\n    markAsModified();\n  }\n});\n\n// Replay button reloads the table data\ndocument.querySelector(\".replay\").addEventListener(\"click\", () => {\n  loadTableData();\n  resetModification();\n});\n\n// Save button displays a message\nsaveButton.addEventListener(\"click\", () => {\n  if (isModified) {\n    alert(\"Data saved successfully!\");\n    resetModification();\n  }\n});\n\n// Add row functionality\ndocument.querySelector(\".circle\").addEventListener(\"click\", () => {\n  const newRow = {\n    ChemicalName: \"New Chemical\",\n    Vendor: \"New Vendor\",\n    Density: 0,\n    Viscosity: 0,\n    Packaging: \"New Packaging\",\n    PackSize: 0,\n    Unit: \"kg\",\n    Quantity: 0,\n  };\n  data.push(newRow);\n  loadTableData();\n  markAsModified();\n});\n\n// Edit specific cell\nfunction editCell(cell, rowIndex, cellIndex) {\n  if (isEditing) {\n    alert(\"Finish the current edit before editing another cell.\");\n    return;\n  }\n\n  const chemical = data[rowIndex];\n  const input = document.createElement(\"input\");\n  input.type =\n    typeof chemical[Object.keys(chemical)[cellIndex]] === \"number\"\n      ? \"number\"\n      : \"text\";\n  input.value = chemical[Object.keys(chemical)[cellIndex]];\n  input.style.width = \"90%\";\n  input.style.padding = \"5px\";\n  cell.innerHTML = \"\";\n  cell.appendChild(input);\n  input.focus();\n  input.addEventListener(\"blur\", () =>\n    saveCell(input.value, rowIndex, cellIndex, cell)\n  );\n  input.addEventListener(\"keypress\", (e) => {\n    if (e.key === \"Enter\") {\n      saveCell(input.value, rowIndex, cellIndex, cell); // Save on Enter key\n    }\n  });\n\n  isEditing = true;\n  currentEditingCell = input;\n}\n\n// Save edited cell value\nfunction saveCell(value, rowIndex, cellIndex, cell) {\n  const chemical = data[rowIndex];\n\n  if (cellIndex === 1) {\n    if (!/^[A-Za-z\\s]+$/.test(value)) {\n      alert(\"Vendor must contain only letters.\");\n      return; // Prevent saving invalid value\n    }\n    chemical.Vendor = value;\n  } else if (cellIndex === 2) {\n    chemical.Density = value;\n  } else if (cellIndex === 3) {\n    chemical.Viscosity = value;\n  } else if (cellIndex === 4) {\n    if (!/^[A-Za-z\\s]+$/.test(value)) {\n      alert(\"Packaging must contain only letters.\");\n      return;\n    }\n    chemical.Packaging = value;\n  } else if (cellIndex === 5) {\n    if (isNaN(value) || value.trim() === \"\") {\n      alert(\"Pack Size must be a valid number.\");\n      return;\n    }\n    chemical.PackSize = parseFloat(value);\n  } else if (cellIndex === 6) {\n    if (!/^[A-Za-z\\s]+$/.test(value)) {\n      alert(\"Unit must contain only letters.\");\n      return;\n    }\n    chemical.Unit = value;\n  } else if (cellIndex === 7) {\n    if (!Number.isInteger(Number(value))) {\n      alert(\"Quantity must be a valid integer.\");\n      return;\n    }\n    chemical.Quantity = parseInt(value);\n  }\n\n  cell.innerText = value;\n  isEditing = false;\n  currentEditingCell = null;\n  markAsModified();\n}\n\nfunction markAsModified() {\n  isModified = true;\n  saveButton.disabled = false;\n  saveButton.style.cursor = \"pointer\";\n}\n\n// Reset modification state\nfunction resetModification() {\n  isModified = false;\n  saveButton.disabled = true;\n  saveButton.style.cursor = \"not-allowed\";\n}\n\n// Sorting functionality\nfunction sortTableByColumn(columnIndex) {\n  const key = Object.keys(data[0])[columnIndex];\n  data.sort((a, b) =>\n    typeof a[key] === \"string\" ? a[key].localeCompare(b[key]) : a[key] - b[key]\n  );\n  loadTableData();\n}\n\ndocument.querySelectorAll(\"th\").forEach((header, index) => {\n  header.addEventListener(\"click\", () => sortTableByColumn(index));\n});\n\nloadTableData();\n\n\n//# sourceURL=webpack://jstable/./js/table.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/table.js"]();
/******/ 	
/******/ })()
;